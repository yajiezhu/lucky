import tensorflow as tf

class TextCNN_LSTM():

    def __init__(self,
                 sequence_length,
                 num_classes,
                 vocab_size,
                 embedding_size,
                 filter_sizes,
                 num_filters,
                 num_layers,
                 hidden_dim,
                 flag
                 ):

        # 输入层
        self.input_x = tf.placeholder(
            tf.int32, [None, sequence_length], name='input_x')
        self.input_y = tf.placeholder(
            tf.float32, [None, num_classes], name='input_y')
        # dropout的占位符
        self.dropout_keep_prob = tf.placeholder(
            tf.float32, name='dropout_keep_prob')

        # 词嵌入层
        # W为词汇表，大小为0～词汇总数，索引对应不同的字，每个字映射为32维的数组，比如[6450,32]
        with tf.name_scope('embedding'):
            self.W = tf.Variable(tf.random_uniform([vocab_size, embedding_size], -1.0, 1.0), name='W')
            self.embedded_chars = tf.nn.embedding_lookup(self.W, self.input_x)
            self.embedded_chars_expanded = tf.expand_dims(self.embedded_chars, -1)

        if flag is 'textCNN':
            print('Cnn')
            # 卷积层和池化层
            # 为3,4,5分别创建128个过滤器，总共3×128个过滤器
            # 过滤器形状为[3,75,1,128]，表示一次能过滤三个字，最后形成75×128的特征向量
            # 池化核形状为[1,75,1,1]，128维中的每一维表示该句子的不同向量表示，池化即从每一维中提取最大值表示该维的特征
            # 池化得到的特征向量为128维
            pooled_outputs = []
            for i, filter_size in enumerate(filter_sizes):
                with tf.name_scope('conv-maxpool-%s' % filter_size):
                    # 卷积层
                    filter_shape1 = [filter_size, embedding_size, 1, num_filters]
                    W = tf.Variable(tf.truncated_normal(filter_shape1, stddev=0.1), name='W')

                    b = tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')
                    conv = tf.nn.conv2d(
                        self.embedded_chars_expanded,
                        W,
                        strides=[1, 1, 1, 1],
                        padding='VALID',
                        name='conv1')

                    # ReLU激活
                    h = tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')

                    # 池化层
                    pooled = tf.nn.max_pool(
                        h,
                        ksize=[1, sequence_length - filter_size + 1, 1, 1],
                        strides=[1, 1, 1, 1],
                        padding='VALID',
                        name='pool')
                    pooled_outputs.append(pooled)

            # 组合所有池化后的特征
            # 将三个过滤器得到的特征向量组合成一个384维的特征向量
            num_filters_total = num_filters * len(filter_sizes)
            with tf.name_scope('concat'):
                self.h_pool = tf.concat(pooled_outputs, 3)
                self.h_pool_flat = tf.reshape(self.h_pool, [-1, num_filters_total])

            # dropout
            with tf.name_scope('dropout'):
                self.h_drop = tf.nn.dropout(self.h_pool_flat, self.dropout_keep_prob)
        elif flag is 'textLSTM':
            print('Lstm')
            sequence_length1 = tf.reduce_sum(tf.cast(self.input_x > 0, dtype=tf.int32), 1)

            def dropout():
                cell = tf.nn.rnn_cell.LSTMCell(hidden_dim)
                return tf.nn.rnn_cell.DropoutWrapper(cell, output_keep_prob=self.dropout_keep_prob)

            with tf.name_scope("rnn"):
                # 多层rnn网络
                cells = [dropout() for _ in range(num_layers)]
                rnn_cell = tf.nn.rnn_cell.MultiRNNCell(cells)
                outputs, states = tf.nn.dynamic_rnn(rnn_cell, inputs=self.embedded_chars,
                                                    sequence_length=sequence_length1, dtype=tf.float32)
                self.h_drop = states[0][1]

        # 全连接层
        # 分数和预测结果
        with tf.name_scope('output'):
            if flag is 'textCNN':
                print('cnn')
                w = tf.Variable(
                    tf.truncated_normal(
                        [num_filters_total, num_classes], stddev=0.1),
                    name='w')
            elif flag is 'textLSTM':
                print('lstm')
                w = tf.Variable(
                    tf.truncated_normal(
                        [hidden_dim, num_classes], stddev=0.1),
                    name='w')

            b = tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')
            self.scores = tf.nn.xw_plus_b(self.h_drop, w, b, name='scores')
            self.predictions = tf.argmax(self.scores, 1, name='predictions')

        # 计算交叉损失熵
        with tf.name_scope('loss'):
            mse_loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=self.input_y, logits=self.scores))
            tf.add_to_collection('losses', mse_loss)
            self.loss = tf.add_n(tf.get_collection('losses'))

        # 正确率
        with tf.name_scope('accuracy'):
            correct_predictions = tf.equal(self.predictions, tf.argmax(self.input_y, 1))
            self.accuracy = tf.reduce_mean(tf.cast(correct_predictions, 'float'), name='accuracy')

        # 记录张量的数据
        with tf.name_scope('summary'):
            tf.summary.scalar("Loss", self.loss)
            tf.summary.scalar("Accuracy", self.accuracy)
